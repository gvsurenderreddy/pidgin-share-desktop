/* Generated by gupnp-binding-tool */

#include <libgupnp/gupnp.h>

#ifndef GUPNP_GENERATED_CLIENT_BINDING_WANIPCONN_XML
#define GUPNP_GENERATED_CLIENT_BINDING_WANIPCONN_XML

G_BEGIN_DECLS

/* action SetConnectionType */

static inline gboolean
set_connection_type (GUPnPServiceProxy *proxy,
                     const gchar *in_new_connection_type,
                     GError **error)
{
  return gupnp_service_proxy_send_action
    (proxy, "SetConnectionType", error,
     "NewConnectionType", G_TYPE_STRING, in_new_connection_type,
     NULL,
     NULL);
}

typedef void (*set_connection_type_reply) (GUPnPServiceProxy *proxy,
                                           GError *error,
                                           gpointer userdata);

static void _set_connection_type_async_callback (GUPnPServiceProxy *proxy,
                                                 GUPnPServiceProxyAction *action,
                                                 gpointer user_data)
{
  struct {GCallback cb; gpointer userdata; } *cbdata;
  GError *error = NULL;

  cbdata = user_data;
  gupnp_service_proxy_end_action
    (proxy, action, &error,
     NULL);
  ((set_connection_type_reply)cbdata->cb)
    (proxy,
     error, cbdata->userdata);

  g_slice_free1 (sizeof (*cbdata), cbdata);
}

static inline GUPnPServiceProxyAction *
set_connection_type_async (GUPnPServiceProxy *proxy,
                           const gchar *in_new_connection_type,
                           set_connection_type_reply callback,
                           gpointer userdata)
{
  GUPnPServiceProxyAction* action;
  struct {GCallback cb; gpointer userdata; } *cbdata;

  cbdata = g_slice_alloc (sizeof (*cbdata));
  cbdata->cb = G_CALLBACK (callback);
  cbdata->userdata = userdata;
  action = gupnp_service_proxy_begin_action
    (proxy, "SetConnectionType",
     _set_connection_type_async_callback, cbdata,
     "NewConnectionType", G_TYPE_STRING, in_new_connection_type,
     NULL);

  return action;
}

/* action GetConnectionTypeInfo */

static inline gboolean
get_connection_type_info (GUPnPServiceProxy *proxy,
                          gchar **out_new_connection_type,
                          gchar **out_new_possible_connection_types,
                          GError **error)
{
  return gupnp_service_proxy_send_action
    (proxy, "GetConnectionTypeInfo", error,
     NULL,
     "NewConnectionType", G_TYPE_STRING, out_new_connection_type,
     "NewPossibleConnectionTypes", G_TYPE_STRING, out_new_possible_connection_types,
     NULL);
}

typedef void (*get_connection_type_info_reply) (GUPnPServiceProxy *proxy,
                                                const gchar *out_new_connection_type,
                                                const gchar *out_new_possible_connection_types,
                                                GError *error,
                                                gpointer userdata);

static void _get_connection_type_info_async_callback (GUPnPServiceProxy *proxy,
                                                      GUPnPServiceProxyAction *action,
                                                      gpointer user_data)
{
  struct {GCallback cb; gpointer userdata; } *cbdata;
  GError *error = NULL;
  gchar *new_connection_type;
  gchar *new_possible_connection_types;

  cbdata = user_data;
  gupnp_service_proxy_end_action
    (proxy, action, &error,
     "NewConnectionType", G_TYPE_STRING, &new_connection_type,
     "NewPossibleConnectionTypes", G_TYPE_STRING, &new_possible_connection_types,
     NULL);
  ((get_connection_type_info_reply)cbdata->cb)
    (proxy,
     new_connection_type,
     new_possible_connection_types,
     error, cbdata->userdata);

  g_slice_free1 (sizeof (*cbdata), cbdata);
}

static inline GUPnPServiceProxyAction *
get_connection_type_info_async (GUPnPServiceProxy *proxy,
                                get_connection_type_info_reply callback,
                                gpointer userdata)
{
  GUPnPServiceProxyAction* action;
  struct {GCallback cb; gpointer userdata; } *cbdata;

  cbdata = g_slice_alloc (sizeof (*cbdata));
  cbdata->cb = G_CALLBACK (callback);
  cbdata->userdata = userdata;
  action = gupnp_service_proxy_begin_action
    (proxy, "GetConnectionTypeInfo",
     _get_connection_type_info_async_callback, cbdata,
     NULL);

  return action;
}

/* action RequestConnection */

static inline gboolean
request_connection (GUPnPServiceProxy *proxy,
                    GError **error)
{
  return gupnp_service_proxy_send_action
    (proxy, "RequestConnection", error,
     NULL,
     NULL);
}

typedef void (*request_connection_reply) (GUPnPServiceProxy *proxy,
                                          GError *error,
                                          gpointer userdata);

static void _request_connection_async_callback (GUPnPServiceProxy *proxy,
                                                GUPnPServiceProxyAction *action,
                                                gpointer user_data)
{
  struct {GCallback cb; gpointer userdata; } *cbdata;
  GError *error = NULL;

  cbdata = user_data;
  gupnp_service_proxy_end_action
    (proxy, action, &error,
     NULL);
  ((request_connection_reply)cbdata->cb)
    (proxy,
     error, cbdata->userdata);

  g_slice_free1 (sizeof (*cbdata), cbdata);
}

static inline GUPnPServiceProxyAction *
request_connection_async (GUPnPServiceProxy *proxy,
                          request_connection_reply callback,
                          gpointer userdata)
{
  GUPnPServiceProxyAction* action;
  struct {GCallback cb; gpointer userdata; } *cbdata;

  cbdata = g_slice_alloc (sizeof (*cbdata));
  cbdata->cb = G_CALLBACK (callback);
  cbdata->userdata = userdata;
  action = gupnp_service_proxy_begin_action
    (proxy, "RequestConnection",
     _request_connection_async_callback, cbdata,
     NULL);

  return action;
}

/* action RequestTermination */

static inline gboolean
request_termination (GUPnPServiceProxy *proxy,
                     GError **error)
{
  return gupnp_service_proxy_send_action
    (proxy, "RequestTermination", error,
     NULL,
     NULL);
}

typedef void (*request_termination_reply) (GUPnPServiceProxy *proxy,
                                           GError *error,
                                           gpointer userdata);

static void _request_termination_async_callback (GUPnPServiceProxy *proxy,
                                                 GUPnPServiceProxyAction *action,
                                                 gpointer user_data)
{
  struct {GCallback cb; gpointer userdata; } *cbdata;
  GError *error = NULL;

  cbdata = user_data;
  gupnp_service_proxy_end_action
    (proxy, action, &error,
     NULL);
  ((request_termination_reply)cbdata->cb)
    (proxy,
     error, cbdata->userdata);

  g_slice_free1 (sizeof (*cbdata), cbdata);
}

static inline GUPnPServiceProxyAction *
request_termination_async (GUPnPServiceProxy *proxy,
                           request_termination_reply callback,
                           gpointer userdata)
{
  GUPnPServiceProxyAction* action;
  struct {GCallback cb; gpointer userdata; } *cbdata;

  cbdata = g_slice_alloc (sizeof (*cbdata));
  cbdata->cb = G_CALLBACK (callback);
  cbdata->userdata = userdata;
  action = gupnp_service_proxy_begin_action
    (proxy, "RequestTermination",
     _request_termination_async_callback, cbdata,
     NULL);

  return action;
}

/* action ForceTermination */

static inline gboolean
force_termination (GUPnPServiceProxy *proxy,
                   GError **error)
{
  return gupnp_service_proxy_send_action
    (proxy, "ForceTermination", error,
     NULL,
     NULL);
}

typedef void (*force_termination_reply) (GUPnPServiceProxy *proxy,
                                         GError *error,
                                         gpointer userdata);

static void _force_termination_async_callback (GUPnPServiceProxy *proxy,
                                               GUPnPServiceProxyAction *action,
                                               gpointer user_data)
{
  struct {GCallback cb; gpointer userdata; } *cbdata;
  GError *error = NULL;

  cbdata = user_data;
  gupnp_service_proxy_end_action
    (proxy, action, &error,
     NULL);
  ((force_termination_reply)cbdata->cb)
    (proxy,
     error, cbdata->userdata);

  g_slice_free1 (sizeof (*cbdata), cbdata);
}

static inline GUPnPServiceProxyAction *
force_termination_async (GUPnPServiceProxy *proxy,
                         force_termination_reply callback,
                         gpointer userdata)
{
  GUPnPServiceProxyAction* action;
  struct {GCallback cb; gpointer userdata; } *cbdata;

  cbdata = g_slice_alloc (sizeof (*cbdata));
  cbdata->cb = G_CALLBACK (callback);
  cbdata->userdata = userdata;
  action = gupnp_service_proxy_begin_action
    (proxy, "ForceTermination",
     _force_termination_async_callback, cbdata,
     NULL);

  return action;
}

/* action SetAutoDisconnectTime */

static inline gboolean
set_auto_disconnect_time (GUPnPServiceProxy *proxy,
                          const guint in_new_auto_disconnect_time,
                          GError **error)
{
  return gupnp_service_proxy_send_action
    (proxy, "SetAutoDisconnectTime", error,
     "NewAutoDisconnectTime", G_TYPE_UINT, in_new_auto_disconnect_time,
     NULL,
     NULL);
}

typedef void (*set_auto_disconnect_time_reply) (GUPnPServiceProxy *proxy,
                                                GError *error,
                                                gpointer userdata);

static void _set_auto_disconnect_time_async_callback (GUPnPServiceProxy *proxy,
                                                      GUPnPServiceProxyAction *action,
                                                      gpointer user_data)
{
  struct {GCallback cb; gpointer userdata; } *cbdata;
  GError *error = NULL;

  cbdata = user_data;
  gupnp_service_proxy_end_action
    (proxy, action, &error,
     NULL);
  ((set_auto_disconnect_time_reply)cbdata->cb)
    (proxy,
     error, cbdata->userdata);

  g_slice_free1 (sizeof (*cbdata), cbdata);
}

static inline GUPnPServiceProxyAction *
set_auto_disconnect_time_async (GUPnPServiceProxy *proxy,
                                const guint in_new_auto_disconnect_time,
                                set_auto_disconnect_time_reply callback,
                                gpointer userdata)
{
  GUPnPServiceProxyAction* action;
  struct {GCallback cb; gpointer userdata; } *cbdata;

  cbdata = g_slice_alloc (sizeof (*cbdata));
  cbdata->cb = G_CALLBACK (callback);
  cbdata->userdata = userdata;
  action = gupnp_service_proxy_begin_action
    (proxy, "SetAutoDisconnectTime",
     _set_auto_disconnect_time_async_callback, cbdata,
     "NewAutoDisconnectTime", G_TYPE_UINT, in_new_auto_disconnect_time,
     NULL);

  return action;
}

/* action SetIdleDisconnectTime */

static inline gboolean
set_idle_disconnect_time (GUPnPServiceProxy *proxy,
                          const guint in_new_idle_disconnect_time,
                          GError **error)
{
  return gupnp_service_proxy_send_action
    (proxy, "SetIdleDisconnectTime", error,
     "NewIdleDisconnectTime", G_TYPE_UINT, in_new_idle_disconnect_time,
     NULL,
     NULL);
}

typedef void (*set_idle_disconnect_time_reply) (GUPnPServiceProxy *proxy,
                                                GError *error,
                                                gpointer userdata);

static void _set_idle_disconnect_time_async_callback (GUPnPServiceProxy *proxy,
                                                      GUPnPServiceProxyAction *action,
                                                      gpointer user_data)
{
  struct {GCallback cb; gpointer userdata; } *cbdata;
  GError *error = NULL;

  cbdata = user_data;
  gupnp_service_proxy_end_action
    (proxy, action, &error,
     NULL);
  ((set_idle_disconnect_time_reply)cbdata->cb)
    (proxy,
     error, cbdata->userdata);

  g_slice_free1 (sizeof (*cbdata), cbdata);
}

static inline GUPnPServiceProxyAction *
set_idle_disconnect_time_async (GUPnPServiceProxy *proxy,
                                const guint in_new_idle_disconnect_time,
                                set_idle_disconnect_time_reply callback,
                                gpointer userdata)
{
  GUPnPServiceProxyAction* action;
  struct {GCallback cb; gpointer userdata; } *cbdata;

  cbdata = g_slice_alloc (sizeof (*cbdata));
  cbdata->cb = G_CALLBACK (callback);
  cbdata->userdata = userdata;
  action = gupnp_service_proxy_begin_action
    (proxy, "SetIdleDisconnectTime",
     _set_idle_disconnect_time_async_callback, cbdata,
     "NewIdleDisconnectTime", G_TYPE_UINT, in_new_idle_disconnect_time,
     NULL);

  return action;
}

/* action SetWarnDisconnectDelay */

static inline gboolean
set_warn_disconnect_delay (GUPnPServiceProxy *proxy,
                           const guint in_new_warn_disconnect_delay,
                           GError **error)
{
  return gupnp_service_proxy_send_action
    (proxy, "SetWarnDisconnectDelay", error,
     "NewWarnDisconnectDelay", G_TYPE_UINT, in_new_warn_disconnect_delay,
     NULL,
     NULL);
}

typedef void (*set_warn_disconnect_delay_reply) (GUPnPServiceProxy *proxy,
                                                 GError *error,
                                                 gpointer userdata);

static void _set_warn_disconnect_delay_async_callback (GUPnPServiceProxy *proxy,
                                                       GUPnPServiceProxyAction *action,
                                                       gpointer user_data)
{
  struct {GCallback cb; gpointer userdata; } *cbdata;
  GError *error = NULL;

  cbdata = user_data;
  gupnp_service_proxy_end_action
    (proxy, action, &error,
     NULL);
  ((set_warn_disconnect_delay_reply)cbdata->cb)
    (proxy,
     error, cbdata->userdata);

  g_slice_free1 (sizeof (*cbdata), cbdata);
}

static inline GUPnPServiceProxyAction *
set_warn_disconnect_delay_async (GUPnPServiceProxy *proxy,
                                 const guint in_new_warn_disconnect_delay,
                                 set_warn_disconnect_delay_reply callback,
                                 gpointer userdata)
{
  GUPnPServiceProxyAction* action;
  struct {GCallback cb; gpointer userdata; } *cbdata;

  cbdata = g_slice_alloc (sizeof (*cbdata));
  cbdata->cb = G_CALLBACK (callback);
  cbdata->userdata = userdata;
  action = gupnp_service_proxy_begin_action
    (proxy, "SetWarnDisconnectDelay",
     _set_warn_disconnect_delay_async_callback, cbdata,
     "NewWarnDisconnectDelay", G_TYPE_UINT, in_new_warn_disconnect_delay,
     NULL);

  return action;
}

/* action GetStatusInfo */

static inline gboolean
get_status_info (GUPnPServiceProxy *proxy,
                 gchar **out_new_connection_status,
                 gchar **out_new_last_connection_error,
                 guint *out_new_uptime,
                 GError **error)
{
  return gupnp_service_proxy_send_action
    (proxy, "GetStatusInfo", error,
     NULL,
     "NewConnectionStatus", G_TYPE_STRING, out_new_connection_status,
     "NewLastConnectionError", G_TYPE_STRING, out_new_last_connection_error,
     "NewUptime", G_TYPE_UINT, out_new_uptime,
     NULL);
}

typedef void (*get_status_info_reply) (GUPnPServiceProxy *proxy,
                                       const gchar *out_new_connection_status,
                                       const gchar *out_new_last_connection_error,
                                       const guint out_new_uptime,
                                       GError *error,
                                       gpointer userdata);

static void _get_status_info_async_callback (GUPnPServiceProxy *proxy,
                                             GUPnPServiceProxyAction *action,
                                             gpointer user_data)
{
  struct {GCallback cb; gpointer userdata; } *cbdata;
  GError *error = NULL;
  gchar *new_connection_status;
  gchar *new_last_connection_error;
  guint new_uptime;

  cbdata = user_data;
  gupnp_service_proxy_end_action
    (proxy, action, &error,
     "NewConnectionStatus", G_TYPE_STRING, &new_connection_status,
     "NewLastConnectionError", G_TYPE_STRING, &new_last_connection_error,
     "NewUptime", G_TYPE_UINT, &new_uptime,
     NULL);
  ((get_status_info_reply)cbdata->cb)
    (proxy,
     new_connection_status,
     new_last_connection_error,
     new_uptime,
     error, cbdata->userdata);

  g_slice_free1 (sizeof (*cbdata), cbdata);
}

static inline GUPnPServiceProxyAction *
get_status_info_async (GUPnPServiceProxy *proxy,
                       get_status_info_reply callback,
                       gpointer userdata)
{
  GUPnPServiceProxyAction* action;
  struct {GCallback cb; gpointer userdata; } *cbdata;

  cbdata = g_slice_alloc (sizeof (*cbdata));
  cbdata->cb = G_CALLBACK (callback);
  cbdata->userdata = userdata;
  action = gupnp_service_proxy_begin_action
    (proxy, "GetStatusInfo",
     _get_status_info_async_callback, cbdata,
     NULL);

  return action;
}

/* action GetAutoDisconnectTime */

static inline gboolean
get_auto_disconnect_time (GUPnPServiceProxy *proxy,
                          guint *out_new_auto_disconnect_time,
                          GError **error)
{
  return gupnp_service_proxy_send_action
    (proxy, "GetAutoDisconnectTime", error,
     NULL,
     "NewAutoDisconnectTime", G_TYPE_UINT, out_new_auto_disconnect_time,
     NULL);
}

typedef void (*get_auto_disconnect_time_reply) (GUPnPServiceProxy *proxy,
                                                const guint out_new_auto_disconnect_time,
                                                GError *error,
                                                gpointer userdata);

static void _get_auto_disconnect_time_async_callback (GUPnPServiceProxy *proxy,
                                                      GUPnPServiceProxyAction *action,
                                                      gpointer user_data)
{
  struct {GCallback cb; gpointer userdata; } *cbdata;
  GError *error = NULL;
  guint new_auto_disconnect_time;

  cbdata = user_data;
  gupnp_service_proxy_end_action
    (proxy, action, &error,
     "NewAutoDisconnectTime", G_TYPE_UINT, &new_auto_disconnect_time,
     NULL);
  ((get_auto_disconnect_time_reply)cbdata->cb)
    (proxy,
     new_auto_disconnect_time,
     error, cbdata->userdata);

  g_slice_free1 (sizeof (*cbdata), cbdata);
}

static inline GUPnPServiceProxyAction *
get_auto_disconnect_time_async (GUPnPServiceProxy *proxy,
                                get_auto_disconnect_time_reply callback,
                                gpointer userdata)
{
  GUPnPServiceProxyAction* action;
  struct {GCallback cb; gpointer userdata; } *cbdata;

  cbdata = g_slice_alloc (sizeof (*cbdata));
  cbdata->cb = G_CALLBACK (callback);
  cbdata->userdata = userdata;
  action = gupnp_service_proxy_begin_action
    (proxy, "GetAutoDisconnectTime",
     _get_auto_disconnect_time_async_callback, cbdata,
     NULL);

  return action;
}

/* action GetIdleDisconnectTime */

static inline gboolean
get_idle_disconnect_time (GUPnPServiceProxy *proxy,
                          guint *out_new_idle_disconnect_time,
                          GError **error)
{
  return gupnp_service_proxy_send_action
    (proxy, "GetIdleDisconnectTime", error,
     NULL,
     "NewIdleDisconnectTime", G_TYPE_UINT, out_new_idle_disconnect_time,
     NULL);
}

typedef void (*get_idle_disconnect_time_reply) (GUPnPServiceProxy *proxy,
                                                const guint out_new_idle_disconnect_time,
                                                GError *error,
                                                gpointer userdata);

static void _get_idle_disconnect_time_async_callback (GUPnPServiceProxy *proxy,
                                                      GUPnPServiceProxyAction *action,
                                                      gpointer user_data)
{
  struct {GCallback cb; gpointer userdata; } *cbdata;
  GError *error = NULL;
  guint new_idle_disconnect_time;

  cbdata = user_data;
  gupnp_service_proxy_end_action
    (proxy, action, &error,
     "NewIdleDisconnectTime", G_TYPE_UINT, &new_idle_disconnect_time,
     NULL);
  ((get_idle_disconnect_time_reply)cbdata->cb)
    (proxy,
     new_idle_disconnect_time,
     error, cbdata->userdata);

  g_slice_free1 (sizeof (*cbdata), cbdata);
}

static inline GUPnPServiceProxyAction *
get_idle_disconnect_time_async (GUPnPServiceProxy *proxy,
                                get_idle_disconnect_time_reply callback,
                                gpointer userdata)
{
  GUPnPServiceProxyAction* action;
  struct {GCallback cb; gpointer userdata; } *cbdata;

  cbdata = g_slice_alloc (sizeof (*cbdata));
  cbdata->cb = G_CALLBACK (callback);
  cbdata->userdata = userdata;
  action = gupnp_service_proxy_begin_action
    (proxy, "GetIdleDisconnectTime",
     _get_idle_disconnect_time_async_callback, cbdata,
     NULL);

  return action;
}

/* action GetWarnDisconnectDelay */

static inline gboolean
get_warn_disconnect_delay (GUPnPServiceProxy *proxy,
                           guint *out_new_warn_disconnect_delay,
                           GError **error)
{
  return gupnp_service_proxy_send_action
    (proxy, "GetWarnDisconnectDelay", error,
     NULL,
     "NewWarnDisconnectDelay", G_TYPE_UINT, out_new_warn_disconnect_delay,
     NULL);
}

typedef void (*get_warn_disconnect_delay_reply) (GUPnPServiceProxy *proxy,
                                                 const guint out_new_warn_disconnect_delay,
                                                 GError *error,
                                                 gpointer userdata);

static void _get_warn_disconnect_delay_async_callback (GUPnPServiceProxy *proxy,
                                                       GUPnPServiceProxyAction *action,
                                                       gpointer user_data)
{
  struct {GCallback cb; gpointer userdata; } *cbdata;
  GError *error = NULL;
  guint new_warn_disconnect_delay;

  cbdata = user_data;
  gupnp_service_proxy_end_action
    (proxy, action, &error,
     "NewWarnDisconnectDelay", G_TYPE_UINT, &new_warn_disconnect_delay,
     NULL);
  ((get_warn_disconnect_delay_reply)cbdata->cb)
    (proxy,
     new_warn_disconnect_delay,
     error, cbdata->userdata);

  g_slice_free1 (sizeof (*cbdata), cbdata);
}

static inline GUPnPServiceProxyAction *
get_warn_disconnect_delay_async (GUPnPServiceProxy *proxy,
                                 get_warn_disconnect_delay_reply callback,
                                 gpointer userdata)
{
  GUPnPServiceProxyAction* action;
  struct {GCallback cb; gpointer userdata; } *cbdata;

  cbdata = g_slice_alloc (sizeof (*cbdata));
  cbdata->cb = G_CALLBACK (callback);
  cbdata->userdata = userdata;
  action = gupnp_service_proxy_begin_action
    (proxy, "GetWarnDisconnectDelay",
     _get_warn_disconnect_delay_async_callback, cbdata,
     NULL);

  return action;
}

/* action GetNATRSIPStatus */

static inline gboolean
get_natrsip_status (GUPnPServiceProxy *proxy,
                    gboolean *out_new_rsip_available,
                    gboolean *out_new_nat_enabled,
                    GError **error)
{
  return gupnp_service_proxy_send_action
    (proxy, "GetNATRSIPStatus", error,
     NULL,
     "NewRSIPAvailable", G_TYPE_BOOLEAN, out_new_rsip_available,
     "NewNATEnabled", G_TYPE_BOOLEAN, out_new_nat_enabled,
     NULL);
}

typedef void (*get_natrsip_status_reply) (GUPnPServiceProxy *proxy,
                                          const gboolean out_new_rsip_available,
                                          const gboolean out_new_nat_enabled,
                                          GError *error,
                                          gpointer userdata);

static void _get_natrsip_status_async_callback (GUPnPServiceProxy *proxy,
                                                GUPnPServiceProxyAction *action,
                                                gpointer user_data)
{
  struct {GCallback cb; gpointer userdata; } *cbdata;
  GError *error = NULL;
  gboolean new_rsip_available;
  gboolean new_nat_enabled;

  cbdata = user_data;
  gupnp_service_proxy_end_action
    (proxy, action, &error,
     "NewRSIPAvailable", G_TYPE_BOOLEAN, &new_rsip_available,
     "NewNATEnabled", G_TYPE_BOOLEAN, &new_nat_enabled,
     NULL);
  ((get_natrsip_status_reply)cbdata->cb)
    (proxy,
     new_rsip_available,
     new_nat_enabled,
     error, cbdata->userdata);

  g_slice_free1 (sizeof (*cbdata), cbdata);
}

static inline GUPnPServiceProxyAction *
get_natrsip_status_async (GUPnPServiceProxy *proxy,
                          get_natrsip_status_reply callback,
                          gpointer userdata)
{
  GUPnPServiceProxyAction* action;
  struct {GCallback cb; gpointer userdata; } *cbdata;

  cbdata = g_slice_alloc (sizeof (*cbdata));
  cbdata->cb = G_CALLBACK (callback);
  cbdata->userdata = userdata;
  action = gupnp_service_proxy_begin_action
    (proxy, "GetNATRSIPStatus",
     _get_natrsip_status_async_callback, cbdata,
     NULL);

  return action;
}

/* action GetGenericPortMappingEntry */

static inline gboolean
get_generic_port_mapping_entry (GUPnPServiceProxy *proxy,
                                const guint in_new_port_mapping_index,
                                gchar **out_new_remote_host,
                                guint *out_new_external_port,
                                gchar **out_new_protocol,
                                guint *out_new_internal_port,
                                gchar **out_new_internal_client,
                                gboolean *out_new_enabled,
                                gchar **out_new_port_mapping_description,
                                guint *out_new_lease_duration,
                                GError **error)
{
  return gupnp_service_proxy_send_action
    (proxy, "GetGenericPortMappingEntry", error,
     "NewPortMappingIndex", G_TYPE_UINT, in_new_port_mapping_index,
     NULL,
     "NewRemoteHost", G_TYPE_STRING, out_new_remote_host,
     "NewExternalPort", G_TYPE_UINT, out_new_external_port,
     "NewProtocol", G_TYPE_STRING, out_new_protocol,
     "NewInternalPort", G_TYPE_UINT, out_new_internal_port,
     "NewInternalClient", G_TYPE_STRING, out_new_internal_client,
     "NewEnabled", G_TYPE_BOOLEAN, out_new_enabled,
     "NewPortMappingDescription", G_TYPE_STRING, out_new_port_mapping_description,
     "NewLeaseDuration", G_TYPE_UINT, out_new_lease_duration,
     NULL);
}

typedef void (*get_generic_port_mapping_entry_reply) (GUPnPServiceProxy *proxy,
                                                      const gchar *out_new_remote_host,
                                                      const guint out_new_external_port,
                                                      const gchar *out_new_protocol,
                                                      const guint out_new_internal_port,
                                                      const gchar *out_new_internal_client,
                                                      const gboolean out_new_enabled,
                                                      const gchar *out_new_port_mapping_description,
                                                      const guint out_new_lease_duration,
                                                      GError *error,
                                                      gpointer userdata);

static void _get_generic_port_mapping_entry_async_callback (GUPnPServiceProxy *proxy,
                                                            GUPnPServiceProxyAction *action,
                                                            gpointer user_data)
{
  struct {GCallback cb; gpointer userdata; } *cbdata;
  GError *error = NULL;
  gchar *new_remote_host;
  guint new_external_port;
  gchar *new_protocol;
  guint new_internal_port;
  gchar *new_internal_client;
  gboolean new_enabled;
  gchar *new_port_mapping_description;
  guint new_lease_duration;

  cbdata = user_data;
  gupnp_service_proxy_end_action
    (proxy, action, &error,
     "NewRemoteHost", G_TYPE_STRING, &new_remote_host,
     "NewExternalPort", G_TYPE_UINT, &new_external_port,
     "NewProtocol", G_TYPE_STRING, &new_protocol,
     "NewInternalPort", G_TYPE_UINT, &new_internal_port,
     "NewInternalClient", G_TYPE_STRING, &new_internal_client,
     "NewEnabled", G_TYPE_BOOLEAN, &new_enabled,
     "NewPortMappingDescription", G_TYPE_STRING, &new_port_mapping_description,
     "NewLeaseDuration", G_TYPE_UINT, &new_lease_duration,
     NULL);
  ((get_generic_port_mapping_entry_reply)cbdata->cb)
    (proxy,
     new_remote_host,
     new_external_port,
     new_protocol,
     new_internal_port,
     new_internal_client,
     new_enabled,
     new_port_mapping_description,
     new_lease_duration,
     error, cbdata->userdata);

  g_slice_free1 (sizeof (*cbdata), cbdata);
}

static inline GUPnPServiceProxyAction *
get_generic_port_mapping_entry_async (GUPnPServiceProxy *proxy,
                                      const guint in_new_port_mapping_index,
                                      get_generic_port_mapping_entry_reply callback,
                                      gpointer userdata)
{
  GUPnPServiceProxyAction* action;
  struct {GCallback cb; gpointer userdata; } *cbdata;

  cbdata = g_slice_alloc (sizeof (*cbdata));
  cbdata->cb = G_CALLBACK (callback);
  cbdata->userdata = userdata;
  action = gupnp_service_proxy_begin_action
    (proxy, "GetGenericPortMappingEntry",
     _get_generic_port_mapping_entry_async_callback, cbdata,
     "NewPortMappingIndex", G_TYPE_UINT, in_new_port_mapping_index,
     NULL);

  return action;
}

/* action GetSpecificPortMappingEntry */

static inline gboolean
get_specific_port_mapping_entry (GUPnPServiceProxy *proxy,
                                 const gchar *in_new_remote_host,
                                 const guint in_new_external_port,
                                 const gchar *in_new_protocol,
                                 guint *out_new_internal_port,
                                 gchar **out_new_internal_client,
                                 gboolean *out_new_enabled,
                                 gchar **out_new_port_mapping_description,
                                 guint *out_new_lease_duration,
                                 GError **error)
{
  return gupnp_service_proxy_send_action
    (proxy, "GetSpecificPortMappingEntry", error,
     "NewRemoteHost", G_TYPE_STRING, in_new_remote_host,
     "NewExternalPort", G_TYPE_UINT, in_new_external_port,
     "NewProtocol", G_TYPE_STRING, in_new_protocol,
     NULL,
     "NewInternalPort", G_TYPE_UINT, out_new_internal_port,
     "NewInternalClient", G_TYPE_STRING, out_new_internal_client,
     "NewEnabled", G_TYPE_BOOLEAN, out_new_enabled,
     "NewPortMappingDescription", G_TYPE_STRING, out_new_port_mapping_description,
     "NewLeaseDuration", G_TYPE_UINT, out_new_lease_duration,
     NULL);
}

typedef void (*get_specific_port_mapping_entry_reply) (GUPnPServiceProxy *proxy,
                                                       const guint out_new_internal_port,
                                                       const gchar *out_new_internal_client,
                                                       const gboolean out_new_enabled,
                                                       const gchar *out_new_port_mapping_description,
                                                       const guint out_new_lease_duration,
                                                       GError *error,
                                                       gpointer userdata);

static void _get_specific_port_mapping_entry_async_callback (GUPnPServiceProxy *proxy,
                                                             GUPnPServiceProxyAction *action,
                                                             gpointer user_data)
{
  struct {GCallback cb; gpointer userdata; } *cbdata;
  GError *error = NULL;
  guint new_internal_port;
  gchar *new_internal_client;
  gboolean new_enabled;
  gchar *new_port_mapping_description;
  guint new_lease_duration;

  cbdata = user_data;
  gupnp_service_proxy_end_action
    (proxy, action, &error,
     "NewInternalPort", G_TYPE_UINT, &new_internal_port,
     "NewInternalClient", G_TYPE_STRING, &new_internal_client,
     "NewEnabled", G_TYPE_BOOLEAN, &new_enabled,
     "NewPortMappingDescription", G_TYPE_STRING, &new_port_mapping_description,
     "NewLeaseDuration", G_TYPE_UINT, &new_lease_duration,
     NULL);
  ((get_specific_port_mapping_entry_reply)cbdata->cb)
    (proxy,
     new_internal_port,
     new_internal_client,
     new_enabled,
     new_port_mapping_description,
     new_lease_duration,
     error, cbdata->userdata);

  g_slice_free1 (sizeof (*cbdata), cbdata);
}

static inline GUPnPServiceProxyAction *
get_specific_port_mapping_entry_async (GUPnPServiceProxy *proxy,
                                       const gchar *in_new_remote_host,
                                       const guint in_new_external_port,
                                       const gchar *in_new_protocol,
                                       get_specific_port_mapping_entry_reply callback,
                                       gpointer userdata)
{
  GUPnPServiceProxyAction* action;
  struct {GCallback cb; gpointer userdata; } *cbdata;

  cbdata = g_slice_alloc (sizeof (*cbdata));
  cbdata->cb = G_CALLBACK (callback);
  cbdata->userdata = userdata;
  action = gupnp_service_proxy_begin_action
    (proxy, "GetSpecificPortMappingEntry",
     _get_specific_port_mapping_entry_async_callback, cbdata,
     "NewRemoteHost", G_TYPE_STRING, in_new_remote_host,
     "NewExternalPort", G_TYPE_UINT, in_new_external_port,
     "NewProtocol", G_TYPE_STRING, in_new_protocol,
     NULL);

  return action;
}

/* action AddPortMapping */

static inline gboolean
add_port_mapping (GUPnPServiceProxy *proxy,
                  const gchar *in_new_remote_host,
                  const guint in_new_external_port,
                  const gchar *in_new_protocol,
                  const guint in_new_internal_port,
                  const gchar *in_new_internal_client,
                  const gboolean in_new_enabled,
                  const gchar *in_new_port_mapping_description,
                  const guint in_new_lease_duration,
                  GError **error)
{
  return gupnp_service_proxy_send_action
    (proxy, "AddPortMapping", error,
     "NewRemoteHost", G_TYPE_STRING, in_new_remote_host,
     "NewExternalPort", G_TYPE_UINT, in_new_external_port,
     "NewProtocol", G_TYPE_STRING, in_new_protocol,
     "NewInternalPort", G_TYPE_UINT, in_new_internal_port,
     "NewInternalClient", G_TYPE_STRING, in_new_internal_client,
     "NewEnabled", G_TYPE_BOOLEAN, in_new_enabled,
     "NewPortMappingDescription", G_TYPE_STRING, in_new_port_mapping_description,
     "NewLeaseDuration", G_TYPE_UINT, in_new_lease_duration,
     NULL,
     NULL);
}

typedef void (*add_port_mapping_reply) (GUPnPServiceProxy *proxy,
                                        GError *error,
                                        gpointer userdata);

static void _add_port_mapping_async_callback (GUPnPServiceProxy *proxy,
                                              GUPnPServiceProxyAction *action,
                                              gpointer user_data)
{
  struct {GCallback cb; gpointer userdata; } *cbdata;
  GError *error = NULL;

  cbdata = user_data;
  gupnp_service_proxy_end_action
    (proxy, action, &error,
     NULL);
  ((add_port_mapping_reply)cbdata->cb)
    (proxy,
     error, cbdata->userdata);

  g_slice_free1 (sizeof (*cbdata), cbdata);
}

static inline GUPnPServiceProxyAction *
add_port_mapping_async (GUPnPServiceProxy *proxy,
                        const gchar *in_new_remote_host,
                        const guint in_new_external_port,
                        const gchar *in_new_protocol,
                        const guint in_new_internal_port,
                        const gchar *in_new_internal_client,
                        const gboolean in_new_enabled,
                        const gchar *in_new_port_mapping_description,
                        const guint in_new_lease_duration,
                        add_port_mapping_reply callback,
                        gpointer userdata)
{
  GUPnPServiceProxyAction* action;
  struct {GCallback cb; gpointer userdata; } *cbdata;

  cbdata = g_slice_alloc (sizeof (*cbdata));
  cbdata->cb = G_CALLBACK (callback);
  cbdata->userdata = userdata;
  action = gupnp_service_proxy_begin_action
    (proxy, "AddPortMapping",
     _add_port_mapping_async_callback, cbdata,
     "NewRemoteHost", G_TYPE_STRING, in_new_remote_host,
     "NewExternalPort", G_TYPE_UINT, in_new_external_port,
     "NewProtocol", G_TYPE_STRING, in_new_protocol,
     "NewInternalPort", G_TYPE_UINT, in_new_internal_port,
     "NewInternalClient", G_TYPE_STRING, in_new_internal_client,
     "NewEnabled", G_TYPE_BOOLEAN, in_new_enabled,
     "NewPortMappingDescription", G_TYPE_STRING, in_new_port_mapping_description,
     "NewLeaseDuration", G_TYPE_UINT, in_new_lease_duration,
     NULL);

  return action;
}

/* action DeletePortMapping */

static inline gboolean
delete_port_mapping (GUPnPServiceProxy *proxy,
                     const gchar *in_new_remote_host,
                     const guint in_new_external_port,
                     const gchar *in_new_protocol,
                     GError **error)
{
  return gupnp_service_proxy_send_action
    (proxy, "DeletePortMapping", error,
     "NewRemoteHost", G_TYPE_STRING, in_new_remote_host,
     "NewExternalPort", G_TYPE_UINT, in_new_external_port,
     "NewProtocol", G_TYPE_STRING, in_new_protocol,
     NULL,
     NULL);
}

typedef void (*delete_port_mapping_reply) (GUPnPServiceProxy *proxy,
                                           GError *error,
                                           gpointer userdata);

static void _delete_port_mapping_async_callback (GUPnPServiceProxy *proxy,
                                                 GUPnPServiceProxyAction *action,
                                                 gpointer user_data)
{
  struct {GCallback cb; gpointer userdata; } *cbdata;
  GError *error = NULL;

  cbdata = user_data;
  gupnp_service_proxy_end_action
    (proxy, action, &error,
     NULL);
  ((delete_port_mapping_reply)cbdata->cb)
    (proxy,
     error, cbdata->userdata);

  g_slice_free1 (sizeof (*cbdata), cbdata);
}

static inline GUPnPServiceProxyAction *
delete_port_mapping_async (GUPnPServiceProxy *proxy,
                           const gchar *in_new_remote_host,
                           const guint in_new_external_port,
                           const gchar *in_new_protocol,
                           delete_port_mapping_reply callback,
                           gpointer userdata)
{
  GUPnPServiceProxyAction* action;
  struct {GCallback cb; gpointer userdata; } *cbdata;

  cbdata = g_slice_alloc (sizeof (*cbdata));
  cbdata->cb = G_CALLBACK (callback);
  cbdata->userdata = userdata;
  action = gupnp_service_proxy_begin_action
    (proxy, "DeletePortMapping",
     _delete_port_mapping_async_callback, cbdata,
     "NewRemoteHost", G_TYPE_STRING, in_new_remote_host,
     "NewExternalPort", G_TYPE_UINT, in_new_external_port,
     "NewProtocol", G_TYPE_STRING, in_new_protocol,
     NULL);

  return action;
}

/* action GetExternalIPAddress */

static inline gboolean
get_external_ip_address (GUPnPServiceProxy *proxy,
                         gchar **out_new_external_ip_address,
                         GError **error)
{
  return gupnp_service_proxy_send_action
    (proxy, "GetExternalIPAddress", error,
     NULL,
     "NewExternalIPAddress", G_TYPE_STRING, out_new_external_ip_address,
     NULL);
}

typedef void (*get_external_ip_address_reply) (GUPnPServiceProxy *proxy,
                                               const gchar *out_new_external_ip_address,
                                               GError *error,
                                               gpointer userdata);

static void _get_external_ip_address_async_callback (GUPnPServiceProxy *proxy,
                                                     GUPnPServiceProxyAction *action,
                                                     gpointer user_data)
{
  struct {GCallback cb; gpointer userdata; } *cbdata;
  GError *error = NULL;
  gchar *new_external_ip_address;

  cbdata = user_data;
  gupnp_service_proxy_end_action
    (proxy, action, &error,
     "NewExternalIPAddress", G_TYPE_STRING, &new_external_ip_address,
     NULL);
  ((get_external_ip_address_reply)cbdata->cb)
    (proxy,
     new_external_ip_address,
     error, cbdata->userdata);

  g_slice_free1 (sizeof (*cbdata), cbdata);
}

static inline GUPnPServiceProxyAction *
get_external_ip_address_async (GUPnPServiceProxy *proxy,
                               get_external_ip_address_reply callback,
                               gpointer userdata)
{
  GUPnPServiceProxyAction* action;
  struct {GCallback cb; gpointer userdata; } *cbdata;

  cbdata = g_slice_alloc (sizeof (*cbdata));
  cbdata->cb = G_CALLBACK (callback);
  cbdata->userdata = userdata;
  action = gupnp_service_proxy_begin_action
    (proxy, "GetExternalIPAddress",
     _get_external_ip_address_async_callback, cbdata,
     NULL);

  return action;
}

/* state variable PossibleConnectionTypes */

typedef void
(*possible_connection_types_changed_callback) (GUPnPServiceProxy *proxy,
                                               const gchar *possible_connection_types,
                                               gpointer userdata);

static void
_possible_connection_types_changed_callback (GUPnPServiceProxy *proxy,
                                             const gchar *variable,
                                             GValue *value,
                                             gpointer userdata)
{
  struct {GCallback cb; gpointer userdata; } *cbdata;
  const gchar *possible_connection_types;

  cbdata = userdata;
  possible_connection_types = g_value_get_string (value);
  ((possible_connection_types_changed_callback)cbdata->cb)
    (proxy,
     possible_connection_types,
     cbdata->userdata);

  g_slice_free1 (sizeof (*cbdata), cbdata);
}

static inline gboolean
possible_connection_types_add_notify (GUPnPServiceProxy *proxy,
                                      possible_connection_types_changed_callback callback,
                                      gpointer userdata)
{
  struct {GCallback cb; gpointer userdata; } *cbdata;

  cbdata = g_slice_alloc (sizeof (*cbdata));
  cbdata->cb = G_CALLBACK (callback);
  cbdata->userdata = userdata;

  return gupnp_service_proxy_add_notify
    (proxy,
     "PossibleConnectionTypes",
     G_TYPE_STRING,
     _possible_connection_types_changed_callback,
     cbdata);
}

/* state variable ConnectionStatus */

typedef void
(*connection_status_changed_callback) (GUPnPServiceProxy *proxy,
                                       const gchar *connection_status,
                                       gpointer userdata);

static void
_connection_status_changed_callback (GUPnPServiceProxy *proxy,
                                     const gchar *variable,
                                     GValue *value,
                                     gpointer userdata)
{
  struct {GCallback cb; gpointer userdata; } *cbdata;
  const gchar *connection_status;

  cbdata = userdata;
  connection_status = g_value_get_string (value);
  ((connection_status_changed_callback)cbdata->cb)
    (proxy,
     connection_status,
     cbdata->userdata);

  g_slice_free1 (sizeof (*cbdata), cbdata);
}

static inline gboolean
connection_status_add_notify (GUPnPServiceProxy *proxy,
                              connection_status_changed_callback callback,
                              gpointer userdata)
{
  struct {GCallback cb; gpointer userdata; } *cbdata;

  cbdata = g_slice_alloc (sizeof (*cbdata));
  cbdata->cb = G_CALLBACK (callback);
  cbdata->userdata = userdata;

  return gupnp_service_proxy_add_notify
    (proxy,
     "ConnectionStatus",
     G_TYPE_STRING,
     _connection_status_changed_callback,
     cbdata);
}

/* state variable ExternalIPAddress */

typedef void
(*external_ip_address_changed_callback) (GUPnPServiceProxy *proxy,
                                         const gchar *external_ip_address,
                                         gpointer userdata);

static void
_external_ip_address_changed_callback (GUPnPServiceProxy *proxy,
                                       const gchar *variable,
                                       GValue *value,
                                       gpointer userdata)
{
  struct {GCallback cb; gpointer userdata; } *cbdata;
  const gchar *external_ip_address;

  cbdata = userdata;
  external_ip_address = g_value_get_string (value);
  ((external_ip_address_changed_callback)cbdata->cb)
    (proxy,
     external_ip_address,
     cbdata->userdata);

  g_slice_free1 (sizeof (*cbdata), cbdata);
}

static inline gboolean
external_ip_address_add_notify (GUPnPServiceProxy *proxy,
                                external_ip_address_changed_callback callback,
                                gpointer userdata)
{
  struct {GCallback cb; gpointer userdata; } *cbdata;

  cbdata = g_slice_alloc (sizeof (*cbdata));
  cbdata->cb = G_CALLBACK (callback);
  cbdata->userdata = userdata;

  return gupnp_service_proxy_add_notify
    (proxy,
     "ExternalIPAddress",
     G_TYPE_STRING,
     _external_ip_address_changed_callback,
     cbdata);
}

/* state variable PortMappingNumberOfEntries */

typedef void
(*port_mapping_number_of_entries_changed_callback) (GUPnPServiceProxy *proxy,
                                                    guint port_mapping_number_of_entries,
                                                    gpointer userdata);

static void
_port_mapping_number_of_entries_changed_callback (GUPnPServiceProxy *proxy,
                                                  const gchar *variable,
                                                  GValue *value,
                                                  gpointer userdata)
{
  struct {GCallback cb; gpointer userdata; } *cbdata;
  guint port_mapping_number_of_entries;

  cbdata = userdata;
  port_mapping_number_of_entries = g_value_get_uint (value);
  ((port_mapping_number_of_entries_changed_callback)cbdata->cb)
    (proxy,
     port_mapping_number_of_entries,
     cbdata->userdata);

  g_slice_free1 (sizeof (*cbdata), cbdata);
}

static inline gboolean
port_mapping_number_of_entries_add_notify (GUPnPServiceProxy *proxy,
                                           port_mapping_number_of_entries_changed_callback callback,
                                           gpointer userdata)
{
  struct {GCallback cb; gpointer userdata; } *cbdata;

  cbdata = g_slice_alloc (sizeof (*cbdata));
  cbdata->cb = G_CALLBACK (callback);
  cbdata->userdata = userdata;

  return gupnp_service_proxy_add_notify
    (proxy,
     "PortMappingNumberOfEntries",
     G_TYPE_UINT,
     _port_mapping_number_of_entries_changed_callback,
     cbdata);
}

G_END_DECLS

#endif /* GUPNP_GENERATED_CLIENT_BINDING_WANIPCONN_XML */
